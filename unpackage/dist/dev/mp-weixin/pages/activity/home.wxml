<view><cu-custom vue-id="0f261f10-1" bgColor="bg-white" bind:__l="__l" vue-slots="{{['content']}}"><view slot="content">活动</view></cu-custom><scroll-view class="bg-red nav text-center fixed" style="{{'top:'+(CustomBar+'px')+';'}}"><view class="{{['cu-item',0==TabCur?'text-white cur':'']}}" data-id="0" data-event-opts="{{[['tap',[['tabSelect',['$event']]]]]}}" bindtap="__e"><text class="cuIcon-activity padding-lr-sm"></text>活动</view><view class="{{['cu-item',1==TabCur?'text-white cur':'']}}" data-id="1" data-event-opts="{{[['tap',[['tabSelect',['$event']]]]]}}" bindtap="__e"><text class="cuIcon-discover padding-lr-sm"></text>话题</view></scroll-view><view class="page"><block wx:if="{{TabCur==0}}"><block><view class="cu-card case no-card"><view class="cu-item shadow"><view class="flex align-center padding-left padding-top"><view class="cu-tag bg-red light sm round margin-right-sm">官方</view><view class="text-cut text-xl">想不到 | 费德勒竟是从这里起步的？</view></view><view data-event-opts="{{[['tap',[['viewActivity1',['$event']]]]]}}" class="image" bindtap="__e"><image src="https://s1.ax1x.com/2020/05/22/YXghwt.png" mode="widthFix"></image></view><view class="cu-list menu-avatar"><view class="cu-item cus-activity"><view class="activity-info solid-bottom padding"><view class="text-gray"><text class="cuIcon-peoplelist margin-lr-xs"></text><text class="text-lg text-red">31</text>/50</view><view class="text-gray padding-top-xs"><text class="cuIcon-calendar margin-lr-xs"></text>2020年6月1日 上午9:30</view></view><view class="activity-action"><button data-event-opts="{{[['tap',[['viewActivity1',['$event']]]]]}}" class="cu-btn round bg-gradual-red" bindtap="__e">查看详情</button></view></view></view></view></view><view class="cu-card case margin-top-sm no-card"><view class="cu-item shadow"><view class="flex align-center padding-left padding-top"><view class="cu-tag bg-green light sm round margin-right-sm">自发</view><view class="text-cut text-xl">这个周末，思南夜派对！</view></view><view data-event-opts="{{[['tap',[['viewActivity2',['$event']]]]]}}" class="image" bindtap="__e"><image src="https://s1.ax1x.com/2020/05/22/YXWnQe.jpg" mode="widthFix"></image></view><view class="cu-list menu-avatar"><view class="cu-item cus-activity"><view class="activity-info solid-bottom padding"><view class="text-gray"><text class="cuIcon-peoplelist margin-lr-xs"></text><text class="text-lg text-red">31</text>/50</view><view class="text-gray padding-top-xs"><text class="cuIcon-calendar margin-lr-xs"></text>2020年6月1日 上午9:30</view></view><view class="activity-action"><button data-event-opts="{{[['tap',[['viewActivity2',['$event']]]]]}}" class="cu-btn round bg-gradual-red" bindtap="__e">查看详情</button></view></view></view></view></view><view class="cu-card case margin-top-sm no-card"><view class="cu-item shadow"><view class="flex align-center padding-left padding-top"><view class="cu-tag bg-green light sm round margin-right-sm">自发</view><view class="text-cut text-xl">教育改变未来：我们一起去支教</view></view><view data-event-opts="{{[['tap',[['viewActivityDetails',['$event']]]]]}}" class="image" bindtap="__e"><image src="http://photocdn.sohu.com/20110721/Img314111793.jpg" mode="widthFix"></image></view><view class="cu-list menu-avatar"><view class="cu-item cus-activity"><view class="activity-info solid-bottom padding"><view class="text-gray"><text class="cuIcon-peoplelist margin-lr-xs"></text><text class="text-lg text-red">31</text>/50</view><view class="text-gray padding-top-xs"><text class="cuIcon-calendar margin-lr-xs"></text>2020年6月1日 上午9:30</view></view><view class="activity-action"><button data-event-opts="{{[['tap',[['viewActivityDetails',['$event']]]]]}}" class="cu-btn round bg-gradual-red" bindtap="__e">查看详情</button></view></view></view></view></view></block></block><block wx:if="{{TabCur==1}}"><block><view class="cu-card article case no-card solid-bottom"><view class="cu-item shadow"><view class="content margin-top-sm"><text class="text-content">Java世界中“几乎”所有的对象都在堆中分配，但是，随着JIT编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。从jdk 1.7开始已经默认开启逃逸分析，如果某些方法中的对象引用没有被返回或者未被外面使用（也就是未逃逸出去），那么对象可以直接在栈上分配内存。</text></view><view class="image"><image src="http://n.sinaimg.cn/sinacn15/753/w500h253/20180624/b808-heirxyf0833730.jpg" mode="widthFix"></image></view><view class="flex text-gray text-lg justify-between margin-lr margin-top-sm"><view class="text-red"><text class="cuIcon-appreciatefill padding-lr-sm"></text>25</view><view><text class="cuIcon-message padding-lr-sm"></text>25</view><view><text class="cuIcon-favor padding-lr-sm"></text>30</view><view><text class="cuIcon-share padding-lr-sm"></text>30</view></view></view></view><view class="cu-card article case no-card solid-bottom margin-top-sm"><view class="cu-item shadow"><view class="content margin-top-sm"><text class="text-content">Java世界中“几乎”所有的对象都在堆中分配，但是，随着JIT编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。从jdk 1.7开始已经默认开启逃逸分析，如果某些方法中的对象引用没有被返回或者未被外面使用（也就是未逃逸出去），那么对象可以直接在栈上分配内存。</text></view><view class="image"><image src="http://n.sinaimg.cn/sinacn15/753/w500h253/20180624/b808-heirxyf0833730.jpg" mode="widthFix"></image></view><view class="flex text-gray text-lg justify-between margin-lr margin-top-sm"><view class="text-red"><text class="cuIcon-appreciatefill padding-lr-sm"></text>25</view><view><text class="cuIcon-message padding-lr-sm"></text>25</view><view><text class="cuIcon-favor padding-lr-sm"></text>30</view><view><text class="cuIcon-share padding-lr-sm"></text>30</view></view></view></view></block></block><view class="cu-tabbar-height margin-bottom-sm"></view></view></view>